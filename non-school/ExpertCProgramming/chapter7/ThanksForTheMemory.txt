- The intel 80x86 Family (memory on this processor)
    - Did not know they were the inventors of the microprocessor
        - they wanted to make a general purpose chip and did so in 1970 with the 4 bit
          intel 4004

    - intel came out with the 8086
        - used this thing called segments to have backwards compatability with the 8085
            - segments are a shifted value that get masked on top of the other address
              bits to get the real address

        - IBM selected intel's 8088 for its PC and that made intel huge
            - eventually intel became bigger than IBM and they made the powerPC to try
              and get rid of the intel monopoly

        - they maintained backwards compatability for everything in the 8086 line of
          processors

- The 80x86 Memory Model (and a note on segments)
    - remember that a segment on UNIX is a section of related stuff in a binary

    - a segment in the Intel x86 memory model is the result of a design in which the
      address space is not uniform, but divided into 64 KB ranges (called segments)
        - this was done for compatability reasons

        - its basically that 64KB region that is pointed to by the segment register
            - an address ir formed by taking the value in this register and shifting it
              left four places
                - this gives us the segment

            - then you have another 16 bit value that is the address in that segment
                - you add this value to the segment register

        - this means that you can have multiple 'addresses' that point to the same data

    - as a c compiler you have to be aware of the different addresses pointing to the
      same place











- The Data Segment and Heap
    - just as the stack segment grows dynamically on demand, the data segment contains an
      object that can do this
        - this is the heap!

    - The heap has to keep track of what blocks are used and what are free
        - the blocks managed this ware are sometimes called the 'arena'

    - malloced memory is always alligned for the machine
        - malloced memory may be rounded up in size to a convenient power of 2

    - the end of the heap is marked by a pointer known as the "break"
        - this is called the break because if you access past it, your program will
          break!

        - when the heap needs more memory, it can push the break further away using
          systemcalls "brk" or "sbrk"

        - you don't call this youself, but malloc will is you get enough memory


- Memory Leaks
    - not freeing Something that is no longer in use

    - he suggests that whenever you write malloc, automatically go and write the free

    - he also suggests using alloca(), though he says it is not always supported because
      "it is hard to implement efficeiently on processors that do not support stacks in
      hardware"

    - even though leaked memory isn't used, it still causes slowdowns
        - this is because it is probably on the same page as some other data that is
          beign used!

- bus errors and segmentation faults
    - the operating system has detected some kind of anomaly

    - the reason for these being printed on a given operating system depends on that
      operating system, so they will be different across variants


    - the hardware tells the OS about some problematic memory reference
        - the OS communicates this to the faulting process by sending a signal
            - a signal is an event notification or a software generated interrupt, much
              used in UNIX systems programming but hardly ever used in applications
              programming

            - generally the bus error or sedmentation fault signal will cause a process
              to dump core and terminate, but you can impose a different actino by
              setting up a signal handler

            - signals were modeled on hardware interrupts.

            - you can read the signal man page!

    - core is an acronym for main memory
        - it comes from the days when memory was made of ferrite rings or "cores"


    - bus error
        - almost always caused by a misaligned read or write

        - on RISC data alignment is required because extra logic to align makes the
          memory much larger and slower

        - basically accesses have to be aligned
            - if you ask for a 4 byte value, you have to ask for it at an address that is
              4 byte alligned
                - addres % 4bytes  == 0


    - segmentation fault
        - caused by dereferencing a pointer with an uninited or illegal value
            - this causes a reference to a 'segment' that is not part of your address space

        - this is generated by the MMU (memory managment unit)
            - so you will hit a Bus Error before a seg fault because the cpu gets
              something first, and the cpu is what generates the bus fault

        - common causes
            - dereferencing a pointer that doesn't contain a valid value
            - dereferencing a null pointer
            - accessing something without the correct permission
            - running out of stack or heap space
