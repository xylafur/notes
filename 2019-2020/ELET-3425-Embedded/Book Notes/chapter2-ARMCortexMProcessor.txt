2.1 Cortex-M Architecture
    - Harvard architecture, seperate data and instruction buses

    - The instruction set combines the high performance of a 32 bit processor
      with high code density typical of 8-bit and 16-bit microcontrollers


        - instructions are fetched using the ICode Bus
        - Data is exchanged with memory and IO via the system bus iterfance

        - there is a second bus for high speed devices like USB

        - Nested Vector Interrupt Controller (NVIC)
            - manages interrupts (hardware triggered software functinos)

        - Internal peripherals like the NVIC communicate with the processor
          using the Private Peripheral Bus (PPB)
            - this thight integration of the processor and interrupt controller
              allows for fast execution of interrupt service routines (ISR)


    2.1.1 Registers
        - R0 - R12 are general purpose registers
        - R13 = Stack Pointer
            - there are two stack pointers
                - Main Stack Pointer (MSP)
                - Process Stack Pointer (PSP)

            - ONly one is active at a time

            - PSP can be for user software while MSP for operating system
              software
                - this allows for teh user software to crash but the kernel
                  could  keep running

        - R14 = Link Register
            - stores the return location for functions

        - R15 = PC



        - ARM Architecture Procedure Call Standard (AAPCS)
            - Part of ARM Application Binary Interface (ABI)

            - Uses registers R0-R3 to pass input parameters into a C function
            - REturn parameter is placed in R0


        - Three status registers
            1. Application Program Status Register (APSR)
            2. Interrupt Program Status Register (IPSR)
            3. Execution Program Status REgister (EPSR)


            - can be accessed individually or in combination as the Pogram
              Status Register (PSR)


################################################################################
#
#                    31 30 29 28 27 26  25 24          15     10          8    0
#            APSR    N  Z  C  V  Q  Reserved
#            IPSR    Reserved                                             ISR #
#            EPSR    Reserved       ICI/IT T  Reserved ICI/IT    Reserved
#            PSR     N  Z  C  V  Q  ICI/IT T  Reserved ICI/IT    Reserved ISR #
#
#
#            PSR     N  Z  C  V  Q  ICI/IT T  Reserved ICI/IT    Reserved ISR #
#
################################################################################



            - N, Z, V, C and Q bits give info about the result of pevious ALU
              operation
                N: Result was negative
                Z: Result was zero
                V: Signed overflow happened
                C: Carry, or unsigned overflow, happened
                Q: Stick saturation flag, indicating that saturation has
                   occurred
                    - this is set by the SSAT and USAT instructions


            - There is A T bit that represents if the CPU is executing Thumb
              instructions

            - ICI/IT bits are used by interrupts and by the IF-Then
              instructions

            - ISR_Number is the interrupt (if any) the processor is handling
                - Bit 0 of the PRIMASK register is the interrupt mask bit
                    - if this bit is 1 most interrupts and acceptions are not
                      allowed

                    - If it is 0, all interrupts are allowed

                - Bit 0 of the FAULTMASK register is the fault mask bit
                    - if this bit is 1, all interrupts and faults are not
                      allowed

                    - If this is 0, then faults and interrupts are allowed

                - Nonmaskable interrupt NMI is not affected by these mask bits


                - BASEPRI register defines the priority of the executing
                  software, prevents interrupts with lower or equal priority
                  but allows higher priority interrupts


    2.1.2 Memory
        - All Cortex-M microcontrollers have similar memory maps

        - These things can all occurr in parallel:
            ICode Bus:  Fetch opcode from ROM
            DCode Bus:  Read constant data from ROM
            System Bus: Read / write data from RAM or IO, fetch opcode from RAM
            PPB:        Read / write data from internal peripherals like the NVIC
            AHB:        Read / write data from high speed IO and parallel ports


        - The ARM Cortex - M uses bit-banding to allow read / write access to
          individual bits in RAM and IO space
            - The address and the bit you wish to write define bit banding

            - if you want to read / write from `0x2000.0000+n` where b is from 0
              to 7, the aliased address for this bit will be
                `0x2200.000 + 32 * n + 4 * b`


            - reading that address will return either a 0 or a 1, and writing
              to it will perform an atomic read-modify-write operation

    2.1.3 Stack
        - The stack always operates on 32 bit data

        - The stack grows downwards in memory
            - so the item at the top of the stack actually has the lowest
              address!

        - storing stuff on the stack
            - the sp is first decremented by 4
            - then the data is placed into memory at the location of the sp

        - retrieving
            - oposite of storing
            - get the data at the location of the sp
            - then increase the stack pointer by 4

        - data is stored in little endian on the stack


        - 5 rules for proper use of the stack
            1. Functions should have an equal number of pushes and pops
            2. Stack accesses (push or pop) should not be performed outside
               the allocated area
            3. Stack reads and writes should not be performed within the free
               area
            4. Stack push should first decrement sp, then store the data
            5. Stack pop should first read the data, and then increment the sp


            - rules 4 and 5 are followed automatically by the PUSH and POP
              instructions

        - Stack overflow
            - the processor generates a `bus fault` when the software tries to
              read from or write to an address that doesn't exist

        - Executing an interrupt service routine will automatically push info
          on the stack
            - violations of rules 3, 4 and 5 will cause erratic behavior when
              operating with interrupts

    2.1.4 Operating Modes
        - Has Two privilage levels called privileged and unprivileged
        - Bit 0 of the CONTROL register is the "thread mode privilege level (TPL)"
            - if it is set to 1 then the processor level is running in
              privileged mode

            - Running in unprilileged presents access to various features:
                - system timer
                - interrupt controller

        - Bit 1 of the CONTROL register is the "active stack pointer selection (ASPSEL)"
            - if set to 1 then the processor uses PSP as the stack point
            - if 0 MSP is used


        - The processor knows if it is running in the foreground (main program)
          or in the background (interrupt service routine)

            - The foregound is defined as "thread mode"

            - The background mode is known as "handler mdoe"

            - The processor switches from foreground mode to background mode
              when an interrupt is triggered

                - the processor starts in thread mode with the ISR_NUMBER=0

                - interrupt service routines use the MSP


    2.1.5 Reset
        - reset occurs immediately after power is applied and can also happen
          by pushing the reset button

        - after the reset the processor is in thread mode, runing a privileged
          level using the MSP stack pointer


        - the value of flash ROM at location 0 is loaded into the SP

        - The value of flash ROM at location 4 is loaded into the PC
            - this is called the reset vector

        - all instrutions are halfword aligned, so the least significant bit of
          the PC must be 0
            - the assembler will set the least significant bit in the reset
              vector, so the processor will properly initialize the thumb bit
              in the PSR

        - LR is initialized to 0xFFFF.FFFF



2.2 Texas Instruments LM3S and TM4C IO Pins
    - The regular function of a pin is to perform parallel IO.
        - most pins have alternative functions though

    - Joint Test Action Group (JTAG)
        - Standard test access port used to program and debug the
          microcontroller board

        - Each microcontroller uses 4 or 5 pins as JTAG interface


    - Port types
        - UART
            - asynchronous serial communication that allows for simultaneous
              communication in both directions

        - SSI
            - AKA Serial Peripherial Interface (SPI)
            - used to interface with medium speed IO devices

        - I2C
            - simple IO bus used to interface with low speed peripheral devices

        - I2S
            - used to communicate sound information

        - PWM
            - apply variable power to motor interfaces
            - can be used to create a DAC

        - ADC
            - Used to measure the amplitude of analog signals
            - takes two analog inputs and produces a digital output

        - QEI
            - Used to interface with a brishless DC motor

        - USB
            - Hich speed serial communication channel

        - Ethernet
            - Used to bridge microcontroller to the internet or LAN

        - CAN
            - creates a high speed communication channel between
              microcontrollers
            - Commonly found in automotive and other distributed control
              applications



    2.2.1 Texas Instruments LM3S811 IO Pins
        - Most pins have two names, port pin (PA0) and the alternative function name (U0Rx)

        - Most IO ports are connected to the system bus interface so the
          microcontroller can perform IO bus cycles simultaneous with
          instruction fetches from flash ROM

        - 32 digital IO lines, 4 ADC inputs

            - ADC has 10 bits of precision and can sample up to 500k times per
              second


        - SysTick and the timers can generate periodic interrupts which are
          useful for executing periodicc software tasks
            - Each timer module has 2 pins, which can be input capture or
              output compare

            - three timer modules provide six timer pins

        - Each UART has two pins, one transmitter and one reciever




2.3 ARM Cortex-M Assembly Language
    - Focuses on Cortex-M microcontrollers which execute Thumb instruction with
      Thumb-2 technology



    2.3.1 Syntax
        - Each instruction has 4 fields seperated by spaces or tabs
            1. Label (optional)
                - identifies the position in memory of the current instruction

                - each label must have a unique name

            2. Opcode field
                - specifies the processor command to execute

            3. Operand Field
                - specifies whre to find data to execute the instructino
                - thum instructions have 0, 1, 2, 3 or 4 operands seperated by
                  commas

            4. Comment field (optional)
                - ignored by the assembler


        - When describing assembly instructions we will use the following list of
          symbols
            Ra Rd Rm Rn Rt Rt2
                represent registers
            #imm12
                represents a 12-bit constant, 0 to 4095
            #imm16
                represents a 16-bit constant, 0 to 65535
            operand2
                represents the flexible second operand as described in Section 2.2.2
            {cond}
                represents an optional logical condition as listed in Table 2.9
            {type}
                encloses an optional data type as listed in Table 2.10
            {S}
                is an optional specification that this instruction sets the
                condition code bits
            Rm {, shift}
                specifies an optional shift on Rm as described in Section 2.2.2
            Rn {, #offset}
                specifies an optional offset to Rn as described in Section 2.2.2



        - There are multiple suffixes that add special meaning to instructions
          to allow optional execution
            - things like GT, EQ, LS, HI, etc


    2.3.2 Addressing modes and operands
        - Addressing mode
            - format the instruction uses to specify the memory location to
              read or write data

            - some instructions do not need to get anything from memory (alu
              stuff)

            - immediate addressing
                - If the data is found in the instruction itself

            - indexed addressing
                - uses a register pointer to access memory


            - PC-relative addressing
                - uses the PC as the pointer to memory (plus an offset)

                - this is used for branching and calling funcitions


        - Load instruction example
            LDR R1,=Count       ;   figures out the address of the variable Count
                                ;   relative to the PC, and stores it in R1

            LDR R0,[R1]         ;   Takes the contents of the address pointed
                                ;   to by R1 and loads that value into R0

        - We can include a shift to the second operand in an instruction
            ADD R0,R1,LSL #4 ; R0 = R0 + R1*16 (R1 unchanged)
            ADD R0,R1,ASR #4 ; signed R0 = R0 + R1/16 (R1 unchanged)


        - Unaligned data accesses
            - almost all instructions have to access data at aligned addresses

            - here is the list of instructions that can access at non aligned
                LDR , LDRT              Load 32-bit word
                LDRH , LDRHT            Load 16-bit unsigned halfword
                LDRSH , LDRSHT          Load 16-bit signed half
                STR , STRT              Store 32-bit word
                STRH , STRHT            Store 16-bit word
                
               
            - all other read and write operations generate a usage fault
              exception if they perform an unaligned access


        - Not all addressing modes are avaliable for all instructions!


    2.3.3 Memory Access Instructions
        - Code Space
            - Actual code, like instructions
            - Usually in ROM, but can be in RAM

        - Data Space
            - where variables are placed

        - There are 4 types of memory objects, and usually a specific register
          is used to access them


                Memory Object Type              Register        Example
            1.  Constants in code space         PC              =Constant
            2.  Local Variables on the Stack    SP              [SP,#0x04]
            3.  Global variables in RAM         R0-R12          [R0]
            4.  I/O Ports                       R0-R12          [R0]



        - ADR and PC-relative addressing can be used to establish a pointer to
          a constant in ROM or to an address within the program


            - General form for ADR
                ADR{cond} Rd,label

                - {cond} is an optinal condition
                - Rd is the destination register
                - label is a label within the code space (-4095, +4095 relative to PC)
                    - the assembler will generate an ADD f SUB instruction to
                      calculate the desired constant


                - ADR usage example
                    Access  ADR R5,Pi       ;   R5=&Pi
                            LDR R6,[R5]     ;   R6=314159
                            ...
                            BX LR




        - LDR loads data from memory into a register
            - there is a pseudo instructino that allows you to load a constant
              or address into a register


        - STR stores data from a register into RAM



    2.3.4 Logical Operations



2.4 Parallel I/O Ports
    2.4.1 Basic concepts of input and output ports
        - the parallel port is the simplest IO port on a microcontroller
            - its a mechanism that allows software to interact with external
              devices

            - multiple signals can be accessed all at once

        - Input port
            - allows the software to read external digital signals
            - read only


                - usually writes do nothing
        
            - Tristate driver allows input signals to be driven onto the data bus
              during a read cycle from the port address

            - Read
                - the digital values on the input pins are copied into the
                  microtcontroller when the software executes a read from the port
                  address


        - Output Port
            - can participate in both the read and write cycles, like regular
              memory

            - this is called readabe output port

            - a write cycle to the port addres will affect the values on the
              output pins

            - the microcontroller places information on the data bus
            - that information is clocked into the D FFs


            - a read to the port returns the current value on the port pins


        - Most ports can be software specified to be either inputs or outputs
            - A `direction register` is used to determine direction
                - if the bit is 0, the port is an input
                - if the bit is 1, the port is an output


            - each port pin has a direction bit


    2.4.2 I/O Programming and the direction register
        - ports are usually memory mapped on embedded microcontrollers


        - Initializing a LMS3 I/O port has 4 steps
            1. Activte the clock for the port
                - then a small delay of about 5 bus cycles

            2. set the port's destination register
            3. Clear bits in the alternate function register
            4. Enable the digital port

            - Use the PUR register to activate an internal pull-up resistor
            - Use PDR register to activate an internal pull-down resistor



