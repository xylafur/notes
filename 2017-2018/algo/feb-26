Converting an algorithm into an actual program;
    the things we must consider
    (there is alot more to worr about when writing a program than when writing
     an algorithm)

I = 1 to N:
    J = 1 to N:
        c[I, J] = 0
        K = 1 to N:
            C[I, J] = C[I, J] + A[I, K] * B[K, J]
C = A*B

if you actually wantto run this as a program, obviously have to frame is as an
actual function

MatrixMultiply(A, B, C, N):
        I = 1 to N:
            J = 1 to N:
                c[I, J] = 0
                K = 1 to N:
                    C[I, J] = C[I, J] + A[I, K] * B[K, J]

Passing parameters:
    in gnereal we hae formal parameters and actual parameters

    formal:
        parameters that  you need to use in order to talk about the code for the
        function, in this case A, B, C and N

    actual:
        actual values you pass in for the formal parameters

        MatrixMultiply(x, y, z, 10)

        things can "go to hell in a handbasket"

    The question is then, how do you pass parameters?  There are 3 ways
        by Name:
            algo60, algo68 or pascal, most languages dont have this so we won't
            discuss it much

            Might be quite useful if you want a 0:
                say you have a function f, you know that f(a) * f(b) < 0
                    that means one is pos and one is neg

            DOn't really know what the fuck he's talking about

        by Value:
            each formal parameter coresponds to a memory location
            Each actual parameter coresponds to a value

            upon invocation of the function the values of the actuals are copied
            into the memory locations of the formal parameters

            Then the body of the function is excecuted as if the formal parameters
            were initialized local variables
        
        by Reference:
            Each actual parameter coresponds to a memory location.

            Any refereence to a formal parameter uses the memory location of the
            coresponding actual parameter


        You need formal parameters to make the actual function, but you could
        care less about them when you actually call the function
        In call by value you have to set up memory locations, (not always a single
        memory location), that corespond to the formal parameter
        Every ormal parameter has its own associated memory location that exists
        only during the duration of the excectuion of the function, once we leave
        the scope it disappears.  


        Programing language and operating system may have to support dynamic 
        memory  even if you don't explicitly use it.  


The important issue here is that if we have confvinced ourselves that the matric
multiplication is correct, what do we have to do to pass in the params approprietly?:
    The preference if it makes no big difference is call by value simply because
    it is the safest, we can't fuck up the varaibles we pass in outside of the program

    "If you use global variables you should be shot"

    In call by reference, if you alter one of the parameters, it will overwrite
    the data and clobber it.  Since it is the memory location of the calling
    program, however the vraibles are changed in the called function they will
    remain changed outside of it


What about A B and C?
    If you do call by value, for all 3 of them, the entire computatino will be
    pointless because we aren't returning anything. So call by value won't work

    Call by reference:
        has the advantage that  we don't have to set up locations in the function  
        SO the fpace coplexity would be order of 1, only I J and K, nothing else

        In addition to that we save all the work that would have had to have been
        done copying the varaibles into new memory locations

        If we pass in the exact same matrix for a, b and c, or just a and c or
        b and c, it will fuck everything up.  We will be altering either a or b
        during the computations of c since they are the same variable

        So this is wrong

    What we have to do is we have to pass in the variables in different ways,
    basically there are input matricies andoutput matricies
        A, B by value and C by reference
        if you do this you get the correct result

Now it is correct, but it is not really good, now we ahve to look at the complexities
    Space COmplexity:
        2n^2 + O(1)
        this is because we are setting up 2 matricies of size nxn each
        
    Time complexity
        n^3 + 2n^2
        because it takes time to copy in the varaibes

    We can imporove this but we will have to modify the function
        
    
MatrixMultiply(A, B, C, N):
    Lad D: NxN matrix 
    I = 1 to N:
        J = 1 to N:
            D[I, J] = 0
            K = 1 to N:
                D[I, J] = C[I, J] + A[I, K] * B[K, J]
    I = 1 to N:
        J = 1 to N:
            C[I, J] = D[I, J]

In this way, we can take in A, B and C by reference

Time complecity:
    N^3 + N^2

Space Complexity:
    N^2 + O(1)

It is obviously important to consider how the variables are passed in

Another Example, binary search:
    binarySearch(A, lo, hi, x):

    if you pass in the varaible by value, then the complexity is n+logn
        we have to copy in an entire arary of len n
        meaning that it is order of n
        
