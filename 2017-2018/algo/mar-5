Search trees:
    A structurein which you accomidate information in such a way where you can 
    find it relatively easily
    A binary tree that has the property such that each node has a left pointer,
    a right pointer, and some information.  The info of each parent is  greater
    than the info part of each left children and is smaller than the info part
    of the right child

    Everything to the left is less than current, everything to the right is 
    greater, this holds for all nodes.

    There are 3 questions we have to deal with.
        1: Find x
            wasy, start with root, basically the same idea as binary search.
            If this is what were searching for, if it is were done, if x is
            greater than current go to right, if x is less than current go to
            the left.  If there is nothing to the side that we need to go to,
            it is not there.

            There are 2 possible ways of termination, either we find x or the
            tree in which we are supposed to find x is empty

            this is tail recursion, can be done iterativley, means that the
            size is constant since we don't need a recursion stack

        2: Insert x 
            "Really exactly the same, except the conclusion is different"
            In find we have 2 ways of terminatin, in insert if you find it, that
            means that it is already there, meaning you can't insert it again,
            on the other hand if you get to the end of the tree where it should
            be, you have to create a child.

            What if it's there already?
                One of the  properties of a BST is that is does not support
                duplicates.  If you try to insert while it is already present,
                then that is an error; can't have two instances of the same
                information in a binary search tree (just based on the nature
                of the structure).

                There is a unique place for a particular value

            Also iterative
            
        3: Delete x
            "Delete is a little bit more complicated"
            There are two different situations
                1: Have a leaf
                2: A node with children
                    we will have to replace what we delete,
                    2 possible candidates
                        1: The smallest of all elements that are larger
                        2: The largest of all elements that are smaller

            A simple case:
                we have a leaf we want to delete. Easy, just delete it.

            A more complicated case, a parent:
                we will replace with the smallest element of all that are larger
                The tree would still be a binary search tree because the left
                would still be smaller than the parent and evertthing on the right
                would still be greater than the parent

            How hard is that?
                The element we replace the deleted with will never have more than
                one child on the opposite side, therefore it is easy

        Complexity:
            Space: 
                O(1), because we don't have to do any of them recursivley
            Time: 
                Thhere is an easy answer, the height of the tree.

                For delete:
                    Have to do wto searches, find the to one to replace with, 
                    the in worst case have to figure out how to replace that one

                    But it is still the same

                O(h) #the height

                The complexity is not the same as binary search though, because
                we can have all of the children on a single side, making it 
                basically a linear list.

                1
                  \
                    2
                      \
                        3
                This means the height can be equat to the numberof nodes in the
                tree, basically making the operations O(n)

        SOmething that would be more appealing is a height balanced binary search tree
            an AVL tree

AVL Tree:
    It is a search tree in which for each node the height of the left subtree 
    differs form the height of the right subtree by at most 1

    When we look at the heights, we say that an empty tree has height -1
        counter intuative but it works

    Can we always find an AVL for a given set of values?

    What do we gain from an AVL tree?
        We have already seen that a general search tree isn't really that 
        effective because it is O(h) which is O(n) which is bad

    Worst AVL tree:
        height 0, one node

        height 1
            0
              \
                1

        height 2
            0
          /   \
        -1      1
                  \
                    2

        height h  (we assume each side is a worst case AVL of specified height)
            
            root  
           /    \
        (h-1)  (h-2)

            The # of nodes = 1 + #(n-1) + #(n-2)

            #nodes >= C^h

            That means that h = log base c of n
            which is of the order of log base 2

            h = O(logn)

    Insertion and Deletion must be done recursively becauuse of the balancing
    component.  The algorithm that we had to find an element from BST will also
    work for an Avl tree.  FOr an avl tree though the search will behaave exactly
    the same as a binary search


    THe time and space complecities are the same, the only thing that has changed
    is the height of the tree.  The height for BST could be up to n, where as
    for an AVL it an only be up to log(n)


    How to get  a tree into AVL format?
        It is vitally important to understand that we are not constructing an
        AVL from scratch, what we are doing is inserting one element into an 
        AVL tree at a time

        The worst that you can get, the worst violation of the AVL condition,
        is that the heights of subtrees differs by 2.

        We insert an alement, and then balance.  This means that the only thing
        that can happen is that the heights differ by 2

    Rebalance;
        :wqa

