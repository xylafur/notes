Finding regex from FA:
    First we must come up with a system of equations, then we must solve those
    equations for the variable that represents the inital state.

        a   b
  ->A   B   C   0
    B   A   C   0
    C   B   A   1

            Xa = aXB :union: bXC
            Xb = aXA :union: bXC
            Xc = aXB :union: bXA :union: epsilon


        Remember that we union with epsilon in the last one because it is an
        accepting state, you would do this for all accepting states

        Now we solve, trying to eliminate all variables except for the one that
        represents our inital state.  We do this using the rules that we know.

        X = LX :union: M
        X = L* :concat: M

        XA = aXB :union: b[aXB :union: bXA :union: epsilon]
           = aXB :union: baXB :union: bbXA :union: b
           = (a :union: ba)XB :union: bbXA :union: b



        XB = aXA :union: b[aXB :union: bXA :union: epsilon]
           = aXA :union: baXB :unoin: bbXA :union: b
           = (a :union: bb)XA :union: baXB :union: b
                    M                 L            M

                        |
                        |
                        v

        XB = (ba)* [(a :union: bb)XA :union: b]
           = (ba)*(a :union: bb)XA :union: (ba)*b


        (we can then substitute our new expression for XB into our euation for
         XA)

        XA = (a :union: ba) [(ba)* (a :union: bb)XA :union: (ba)*b] :union: bbXA :union: b
           = ((a :union: ba) (ba)*(a :union: bb) :union: bb)XA :unoin: (a :union: ba)(ba)*b :union: b


        XA = [(a :union: ba)(ba)*(a :union: bb) :union: bb]*[(a :union: ba)(ba)*b :union: b[


Number 3 from the sheet, question a:
    (aa :union: aaa :union: aaaaa)*

    A = {a}

    we have to define a table (automaton) for each letter

      a             a
    0 1 0       0   2   0   ...and so on... these are the first 2 a's, we have
    1 / 1       2   /   1                   to do this for all a's


    So the concatenation for the 2 a's is

        a
    0   1   0
    1   2   0
    2   /   1


            now the concat of the three

      a             a               a
    0 1 0       0   2   0       0   5   0
    3 / 1       4   /   1       5   /   1

            a
        0   3   0
        3   4   0
        4   5   0
        5   /   1


    and then we do the same thing for the 5 concats.. and we get

            a
        0   6   0
        6   7   0
        7   8   0
        8   9   0
        9   10  0
        10  /   1

        and we can do these concatenations is any order  obviously, and end up
        with the same final automaton


    Now we do the union of the first two constructed automatons

            a
        0   1,3 0
        1   2   0
        2   /   1
        3   4   0
        4   5   0
        5   /   1


    and then we can do the other union

            a
        0   1,3,6   0
        1   2       0
        2   /       1
        3   4       0
        4   5       0
        5   /       1
        6   7       0
        7   8       0
        8   9       0
        9   10      0
        10  /       1

    and then finally we can do the star


             a
        0   1,3,6   1
        1   2       0
        2   1,3,6   1
        3   4       0
        4   5       0
        5   1,3,6   1
        6   7       0
        7   8       0
        8   9       0
        9   10      0
        10  1,3,6   1


Consider a DFA D
    with n states
    w = a1, ..., an , |w| = n

    q0
    q1 = T(q0, a1)
    q2 = T(q1, a2)
    .
    .
    .
    qn = T(qn-1, an)

    We said there are only n states, but we have defined n+1 states.  That
    means that one of them is repeated, based on the pigeon hole principle.


    We hit the pumping lemna, where there is a loop


    A language is regular if and only if

        1. if can be accepted by a dfa
        2. it is accepted by an nfa
        3. it can be represented in a regular expression

        As we have proven, all of these are equivalent, so if a language can be
        represented in any of these formes then it can be represented in all
        and it is regular

    L = { a^s :concat: b :concat: a^s | s >= 1 }

    Liese says that this is not a regular language, to prove we use a
    contradictino and assume that it is a regular language.  If it is a regular
    language, then there must be a DFA 'D' accepting L.

    Let n be the number of states of D.  Consider Z = a^n B a^n, z is in L, and
    z must be accepted by D.

    What we are going to do, is look at that word z and cut off the first n
    letters.  Using the pumping lemma, we can show that there must be a loop in
    the first n a's.  THis means that we should be able to loop around an
    infinite number of times for the first a's, and then end up in an accepting
    state, but the a's on the other side need the same number of a's as the
    second, which means we wouldn't end up in an accepting state - thus
    contradiction.


