variable multation in c++ is enabled by default.  If we declare and define an
integer i then we can overwrite that value with another integer later.

We can use the const keyword to disable mutation of particular variables.

In passing variables into functions, mutation is generally disabled by default.
When you pass in an integer, float, bool or another simple data type then that
variable or value is passed by value to the function - which means that a copy
is made of the value and placed into the function stack.  If we want to pass in
a variable that can be mutated into a function, we can pass in that varaible
either as a pointer or by reference.


To discover the possible performance implications of this, let us consider a
function that takes in 2 matricies and then adds them.  This function will be
useless because it won't actually return anything for simplicity.  We will also
assume that the complier doesn't pull any funny business and not actually
execute the code since it is useless.  This function will be written in c++.

you can't really pass arrays by value in c++, so I will do a sort of hack to
get around this.  my code is below


/******************************************************************************
**      PASS BY VALUE BEGIN                                                 **
******************************************************************************/

#define MATRIX_SIZE 100
typedef struct _matrix {
    int vals [MATRIX_SIZE] [MATRIX_SIZE];
} matrix;

void add_matricies(matrix a, matrix b){
    /*  Add the matricies
     */
}

/******************************************************************************
**      PASS BY VALUE END                                                    **
******************************************************************************/

So to pass in these matricies by value, we have to copy each of the elements
into a new location on the function stack.  Instead of the size of the matrix
being 100, lets consider it to be n.  We are copying two matricies into the
fucntion by value, each of those matricies being of size nxn.  this means that
the time complexity to copy in both of these matricies into the fucntion stack
would be 2 * O(n^2) - or in proper O() notation, O(n^2)


Now let us consider the situation where we pass in the matricies by reference
using a pointer

/******************************************************************************
**      PASS BY REFERENCE BEGIN                                              **
******************************************************************************/

#define MATRIX_SIZE 100
typedef struct _matrix {
    int vals [MATRIX_SIZE] [MATRIX_SIZE];
} matrix;

void add_matricies(matrix * a, matrix * b){
    /*  Add the matricies
     */
}

/******************************************************************************
**      PASS BY REFERENCE END                                                **
******************************************************************************/

in this case, we do not have to copy the values of each of these matricies.
Instead we just pass a reference to the locatin of each of the matricies to the
function - this is done by pushing those addresses onto the fucntino stack.
THose operations are both order of 1.  Meaning that to pass in the matricies by
reference it takes O(1).. quite an improvment over the pass by value approach
