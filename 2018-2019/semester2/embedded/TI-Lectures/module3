- ARM Cortex M Architecture
    - Architecture is how the components of the computer are connected together
        - 2 types of memory
            - EEPROM: Flash FROM

            - RAM
        - Input ports
        - Output ports

    - Harvard architecture
        - has a bus for fetching opcodes and a bus for fetching data
            - this makes a computer faster


    - von Neumann:
        - has only a single bus to access every component

    - This processor:
        - has multiple busses
        - optimized for speed


    - RISC (Reduced Instruction Set Computer):
        - 200 instructions
            - all have fixed length
            - thumb 2 configuration: most are 16 bits, some are 32 bits

        - instrcutions execute in 1 or 2 bytes cycles

        - load and store architecture
            - one instruction to load memory from register
            - one instruction to write register to memory

        - lots of instructions when high level code is compiled into machine code

    - 16 registers
        - each is 32 bits wide

        - R0: Function parameter, also the return value
        - R1: Second function parameter
        ..

        - R13: Stack pointer

        - R14: Link register
        - R15: PC
            - points into rom to fetch opcodes


    - Memory
        - again, opcodes are fetched from a different bus
            - there is a single address space
            - 4GiB in size

            - each address is 8 bits wide

        - Flash, ram, io ports and internal io are all mapped in this address
          space
            - there is actually only 64k of ram

    - Endianness
        - the arm cortex is little endian
        - least significant byte is first

    - Addressing modes
        - how we fetch data from memory to the processor

        - immediate
            - the data itself is encoded in the machine code of the isntructino

            MOV R0,#100

        - Indexed
            - basically uses a pointer
            - in a register, we have a pointer
            - we use the address held in that register and put what is stored
              in that address into our cpu

            LDR R0,[R1]

            - we can also offset an address by some ammount

            LDR R0,[R1,#4]

        - PC-RElative
            - Program Relative Addressing
            - take the program counter and offset it by some ammoutn


- Assembly Language Programming
    - We're gonna write all our code in C, but its important to know how to
      undertand assembly for this processor

    - Most operations in this assembly goes from right to left

    - Logic operations
        - AND {Rd,} Rn, <op2> ;Rd=Rn&op2
        - ORR {RD,} Rn, <op2> ;Rd=Rn|op2
        - EOR {RD,} Rn, <op2> ;Rd=Rn^op2

    - Shift
        - Shift right is a divide by 2
        - Shift right is a multiply by 2

        - We need to know if we have a signed or unsigned
            - logical shift
                - for unsigned number
                - a 0 is placed as the most significant bit

            - arithmatic shift
                - the most significant bit is preserved

    - Arithmetic Operations
        - We need to keep track of how many bits we will end up with
            - if we add two 32 bit numbers then we will have overflow because
              the result will by 33 bits

            - this is even worse for multiplication

        - To prevent overflow in our software, we are going to predict the
          largest value our result will be and predict if there will be
          overflow
            - we can also promote a number to a higher precision
            - use a long rather than just an int
                - 64 bits vs 32

        - Division
            - can't divide by 0
            - watch for dropout
                - loss of bits

        - Signed or unsugned
            - the numbers we are working on must be the same sign

        - ADD {RD,} Rn, <op2>
        - SUB {RD,} Rn, <op2>
        - CMP Rn, <op2>

    - Stack
        - can be used for temp storage
        - can also be used for local variables

        - To push we have to decrement our stack pointer by 4 (because of 32
          bit addressing) and then move whatever to the new SP position
            - This means that the stack grows up (towards 0)

        - to pop we just do the opposite
            - read the SP first and then increment the SP

    - Function calls
        - a form of abstraction

        - We have the low level (implementation)
        - and the high level (function call)

        - 'BX LR' is 'return'
            - Takes value in LR and puts it into PC

        - BL (branch link) instruction
            - sets the LR to the return address (the instruction after the
              call)

            - set the PC to the function address

    - Conditionals
        - must know if we are working with signed or unsigned

    - loops
        - use the cmp instruction

        - use things like BEQ

    - Main things
        - worry about overflow and dropout

        - undestand the number of bits in our numbers and if they are signed or
          unsigned










