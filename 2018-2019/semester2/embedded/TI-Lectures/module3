- ARM Cortex M Architecture
    - Architecture is how the components of the computer are connected together
        - 2 types of memory
            - EEPROM: Flash FROM

            - RAM
        - Input ports
        - Output ports

    - Harvard architecture
        - has a bus for fetching opcodes and a bus for fetching data
            - this makes a computer faster


    - von Neumann:
        - has only a single bus to access every component

    - This processor:
        - has multiple busses
        - optimized for speed


    - RISC (Reduced Instruction Set Computer):
        - 200 instructions
            - all have fixed length
            - thumb 2 configuration: most are 16 bits, some are 32 bits

        - instrcutions execute in 1 or 2 bytes cycles

        - load and store architecture
            - one instruction to load memory from register
            - one instruction to write register to memory

        - lots of instructions when high level code is compiled into machine code

    - 16 registers
        - each is 32 bits wide

        - R0: Function parameter, also the return value
        - R1: Second function parameter
        ..

        - R13: Stack pointer

        - R14: Link register
        - R15: PC
            - points into rom to fetch opcodes


    - Memory
        - again, opcodes are fetched from a different bus
            - there is a single address space
            - 4GiB in size

            - each address is 8 bits wide

        - Flash, ram, io ports and internal io are all mapped in this address
          space
            - there is actually only 64k of ram

    - Endianness
        - the arm cortex is little endian
        - least significant byte is first

    - Addressing modes
        - how we fetch data from memory to the processor

        - immediate
            - the data itself is encoded in the machine code of the isntructino

            MOV R0,#100

        - Indexed
            - basically uses a pointer
            - in a register, we have a pointer
            - we use the address held in that register and put what is stored
              in that address into our cpu

            LDR R0,[R1]

            - we can also offset an address by some ammount

            LDR R0,[R1,#4]

        - PC-RElative
            - Program Relative Addressing
            - take the program counter and offset it by some ammoutn




