From the programming languages book

Parse Tree:
    hierarchical representation of derivation

    there are three methods of evaluating tree:
        pre order
        post order
        in order

    we want to read the tree in such a manner that we evaluate the leaves
    first, the leaves have the higher presidence

    the compiler obviously needs to generate code that can be ran by the cpu
        this tree helps us in achieving that

    since we are not searching for anything in the tree, we are obviously not
    going to use BFS or DFS
        in addition, those algorithms accept graphs as parameters


Ambiguity in Grammars:
    a grammar is ambigious iff it can generate 2 different evaluations from a
    single statement/ expressoin

    ambigious
        <expr> -> <expr> <op> <expr> | constant
        <op> -> / | -

    unambigious Expressoin Grammar:
        we use rthe parse tree to indicate precedenve levels of the operators,
        we cannot have ambigiousty


        <expr> -> <expr> - <term> | <term>
        <term> -> <term> / const | const

    having ++ can complicate things:
        i++ == i = i + 1

    we need some way of definining identifiers:
        also can variables share names with identifiers
        how to we ensure no variables are named the same as identifiers

Extended BNF:
    can put optional parts in brackets:
        <proc_call> -> indent [(<expr_list>)]

    for repetitions we use {}:
        <indent> -> letter {letter|digit}

Static Semantics:
    Switching gears to interpreting language

    context free grammars cannot describe all of the syntax of programming
    language

    categories of constructs that are trouble:
        context free (but cumbersome)
            types of operands in expressions

        non-context-free:
            variables must be declared before they are used
                this is not definable with a grammar

    just context free grammars on its own is not enough



Context free grammar helps us identify:
    identifiers and keywords

    statements, function definitions, variable assignments, function calls..

To deal with data types and allocate memory, we need something else

Semantics:
    there is no single acceptable notation for describing the semantics of a
    language
        it is impossible to define mathematically

    several needs for a methodology nd notation for semantics
        - programmers need to know what statements mean
        - compiler writers must know exactly what constructs do
        - correctness proofs would be possible
        - compiler generators would be possible
            - a program that can generate a program
        - designers could detect ambiguities and inconsistencies

Operational Semantics:
    Definition:
        descrube the meaning of a program by executing its statements on
        a machine, either simulated or actual

        change in the state of the machine defines the meaning of the statement

    to use operational semantics for a high level language, a virtual machine
    is needed

Denotational Semantics:

Loop Meaning:
    recursion, when compared to iteration, is easer to describe with
    mathematical rigor
    
    recursion is better than itterawtion to claim the program works correctly

    
