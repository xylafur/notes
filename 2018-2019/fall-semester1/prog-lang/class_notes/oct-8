CREATE PROCEDURE name
AS
    IN param1, OUT param2...
BEGIN

END;
\

functional programming:
    variables assignment    (binding)
    flow control statement  (functions [though more complicated to be as
                                        powerful as the operators we are
                                        losing],
                             operators for function, recursion)

math
    axioms
    propositions
        first order logic
        varibles
        notation

    We notice that there is no idea of an 'assignment'

in funcional programing, the aim is to make it more mathlike;
    remove variable assignment and flow control statments


    there is a seperation between variables and functions:
        we try to erase the boundry, to where a variable can be a function and
        a function canbe a variable

        there then surfaces this blur regarding 'datatypes'
    
    data types:
        simple data types:
            real, int, string, ..

        complex data types:
            lists
                though not simple, they are fundamental
                we can use lists for many things, and build many things from
                lists

                this is represented as a single object, one variable

                in some functional languages a list is a data type, in others a
                list is a function that can return simple data types

        functions
            have no names



Lambda Calculus:
    pure:
        actual lambda calculus

    applied:
        made up of:
            functional operators

            data types

        we have data types ususally because it makes compilation more useful,
        then we are able to know information before evaluation time

    
    lambda x.M
        lambda =  the symbol lambda
        x = the functin
        . = seperator?
        M = what is returned?

        lambda x.x
            in this case it will be the identity function

            lambda x.x === I(x) = x

        the function above being called
            lambda x.x(1) = 1


        these functions have no name, they are just x

    x^2
        lambda x.x*x

functions:
    operators:
        +
            add(x, y)

        -
            subtract(x, y)

        x + y + z
            add(x, add(y, z))
            add(add(x, y), z)

        etc..




