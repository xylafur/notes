What is a programming language:
    a notation in which we represent algorithms

    A means for communication between programmers
        though he makes a point that it is well named - code can appear cryptic
        to other programers

    A good programming language must imlpement:
        correctness:
            the programming language must give the correct result
            this can be verified by testing against known results?
            we expect certain output based on certain input
                though he says that it is more complicated than this

        maintainability:
            mainly important when you have a large project
            
        performance:
            supposedly in functional languages, you express things
            mathematically and the interpreter will determine how to do it
            efficiently

            In a compiled language you can specify how the oprimization /
            program runs


Styles/ Paradims:
    procederal:
        snippets of code that do specific things, things are broken down into
        procedures

        bascially you have functions or subroutines

    Data Abstraction:
        languages that focus on data rather than the implementation

    OOP:
        obviously OOP didn't solve everything

    Generic Programming:
        you can use generic types - the source code may generate more source
        code for each type you implement for your generic function
        

    Functional Programming:
        logical programming, rule based programing, constraints based
        programming, aspect-oriented programming
            
