- HW 2 is due Oct/15

- HW 3 will be functional proramming 
    - due sometime around oct 30 or maybe beginning of november

- HW 4 will be a continuation of homework 2 (also in c++)
    - he wants to put funcitonal programming functional programming into our
      interpreter
    - He cals it simplified functional code
    - Due around Nov 28-30 (after thanksgiving)

- Midterm
    - November 12 (monday)
    - he won't be here

- Thanksgiving week
    - We have classes that monday
    - Nothing we can live without - if we are going out of town or something it
      should be okay

No final exam for this class

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$                                  $$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$  Slides from Sebesta (slides 5)  $$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$                                  $$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

* Names, Bindings and Scopes:
    - Introdution
        - Imperative languages are abstractions of von Neumann architecture
            - Memory Processor
            - Processor

        - Variables are characterized by attributes
            - To design a type, must consider scope, lifetime, typechecking,
              initialization and type compatibility

            - we haven't defined the type in our grammar definition, how do we
              determine the type?  THis is obviously important

            - We want to be able to do as much of this as possible at compile
              time

    - Names
        - we have things to consider with our names, what characters are
          allowed, can we use keywords?

        - also gotta consider the length of our names, do we have a max length?

        - our constraints can make the lexer easier to implement

        - we can store our look up ina hash tables

    - Variables
        - sextuple of attributes
            - Name
                - not all variables have them

            - address
                - memory with which the variable is associated

                - two different names for the same variable can become a
                  headache

                - Binding
                    - an association between
                        1) A variable and its datatype or value
                        2) operation and a symbol

                    - binding time is the time at which binding takes place

                As we update the table above, we are updating the lifetime of the
                variable - how it has changed over time.

            - value
                - the contents of the location with which the variable is
                  associated

            - type
                - determines the range of variables and the set of operations
                  that are defined on it

            - lifetime

            - scope

        - Binding
            - Static and Dynamikc Binding
                - Static
                    - First occurs before runtime and remains unchanged

                - Dynamic
                    - first occurs during execution
                    - can change during execution of the program

            - Type Binding
                - how is type specified and when does it take place?

            -Explicit and Implicit Declaration
                - Explicit
                    - program statement used for declaring the types of
                      variables
                - implicit
                    - default mechanism for specifying types of variables
                      thorough default conventions rather than conventional

                - some languages use the context of a variable to determine the
                  type






        






