4.1 Intro
    - Basic MIPS Implementation
        - for every instruction, the first 2 steps are identical
            1. Send PC to memory to fetch code at that address
            2. Read the registers specified by our instruction

        - the steps after these 2 are instruction dependent
        - many things, such as input data, can come from many sources and need to be fed
          into a mux
            - output from the ALU/output from memory
            - input to alu from memory or register
            - branch or increment pc by 4


4.2 Logic Design Conventions
    - Data path elements consist of combinational and Sequential ("state") elements

    - clocking methodology
        - we can't have things like reads and writes happening at the same time
            - we need some sort of clocking methodology to handle this

        - we will assume edge triggered clocking
            - sequential elements updated on clock edge

        - inputs were written in previous clock cycle, outputs written on next clock
          cycle

        - generally sequential elements also have an "enable" or "control" signal

        - we use 'asserted' and 'deasserted' to avoid confusion w/ regular and negative
          logic

        - we can read and write in the same clock cycle as long as they happen on
          different edges


4.3 Building a datapath
    - start by thinking of all the components you need for all of your instructions
        - we start at the top and work down through abstraction
            - instruction memory
            - program counter
            - adder

    - to execute, we first fetch instruction from memory
        - then to prepare for the next instruction, we increment program counter

    - the 32 registers are stored in a "register file"
        - which is just a collection of read / write registers

        - we have to be able to tell which of these 32 to use


4.4 A simple implementatino scheme
    - we will be looking at the simplest possible implementation of MIPS subset

    - ALU control
        - The ALU expects a control inptu that will tell it which operation to preform
            - there is a ALU control unit that takes in the 'func' component of the
              instruction and then generates the selection of operation for ALU

        - we use several small control units, which each do some level of decoding, to
          reduce the size of the main control unit

            - this can also potentiall increase the size of the control unit

        - for the regular ALU operations (add, sub, AND, OR, etc) we need the func field
            - for all ofhter instructions, the ALU operation depends on the instruction
              itself!
                - for `load word` / `store word` we will always `add`
                - for `beq` we will always sub for the `cmp` operation


            - for those instructions where the ALU operation does not rely on the func,
              we can mark those on a truth table we construct

    - Desigining the Main Control Unit
        - the destination register can be in two different places, such as for load and R
          type instruction
            - additional things such as using the last 16 bits as a constant for I type
              instructions

            - these lead to us needing those muxes to choose between different inputs
              depending on the instruction type


        - Control Signals
            - additionally there is the ALU op set of bits
             ___________________________________________________________________
            | Signal    |   When Asserted           |   When Deasserted         |
            |-----------|---------------------------|---------------------------|
            | RegDst    |Register destination number|register destinaion comes  |
            |           |for the write register     |from the rt field          |
            |           |comes from the rd field    |                           |
            |-----------|---------------------------|---------------------------|
            |RegWrite   |The register on the Write  | None                      |
            |           |register input is written  |                           |
            |           |with the value of the write|                           |
            |           |date input                 |                           |
            |-----------|---------------------------|---------------------------|
            |ALUSrc     |The second ALU operand is  |the second ALU operand comes
            |           |the sign extende, lower 16 |from the second register file
            |           |bits of the instruction    |output (read data 2)
            |-----------|---------------------------|---------------------------|
            |PCSrc      |The PC is replaced by the  |The PC is replaced by the  |
            |           |output of the adder that   |adder that computes the    |
            |           |computes the branch target |PC + 4                     |
            |-----------|---------------------------|---------------------------|
            |MemRead    |Data memory contents desig-|   None                    |
            |           |nated by the address input |                           |
            |           |are put on the Read data   |                           |
            |           |output                     |                           |
            |-----------|---------------------------|---------------------------|
            |MemWrite   |Data memory contents       |   None                    |
            |           |designated by the address  |                           |
            |           |input are replaced by the  |                           |
            |           |value on the write data inp|                           |
            |-----------|---------------------------|---------------------------|
            |MemtoReg   |The value fed to the       |The value fed to the reg.  |
            |           |register write data input  |write data input comes     |
            |           |comes from the data mem    |from the ALU               |
            |___________|___________________________|___________________________|



        - Operation of the Datapath
            - Different instructions will use the datapath differently
                - for each of these examples, everything occurs in one clock cycle

            - arithmetic
                1. Instruction is fetched, PC is incremented
                2. Two registers are read from the register file
                    - the main control unit computes the setting of the control lines

                3. The ALU operates on the data read from the register file
                    - The CLU function is generated using the function (funct) code

                4. The result from the ALU is written into the register file

            - Load Word
                1. Instruction is fetched from IC, PC is incremented
                2. Register is read from the register file
                3. The ALU computes the sum of the value frad from the register file and
                   the sign extended, lower 16 bits of the instruction (offset)
                4. The sum from the ALU is used as the address for the data memory
                5. The data from the memory unit is written to the register file
                    - the register destination comes from the instruction


            - Branch Equal Instruction
                1. Instruction is feteched from IC, PC is incremented
                2. Two registers are read from the register file
                3. ALU performs a suntract on the data values read from the register file
                    - the value of PC + 4 is added to the sign extended lower 16 bits of
                      the instruction, shifted left by 2
                    - the result is the branch target address
                4. The Zero result from the ALU is used to decide which adder result to
                   store in the PC

4.5 An Overview of Pipelining
    - Pipelining allows multiple instructions to be overlapped in execution

    - If the stages are perfectly balanced, then the time between instructions
      on the pipelined processor (assuming ideal conditions) is equal to

        Time Between Instructions (pipelined) = Time between Instructions (not pipelined)
                                                / Number of Pipe stages


        - Under ideal conditions, with a large number of instructions, the
          speed up from pipelining is equal to the number of pipeline stages


        - in real life though the stages are imperfectly balanced and there is
          overhead for pipelining
            - this makes the actual higher than the minimum


    - Designing Instruction Sets for Pipelining
        - MIPS was designed for pipelining

        - all mips instructions are the same length
            - this makes it wasier to fetch instructions int he first pipeline
              stage and decode them in the second stage

        - the source register fields is in the same location for all formats
            - this symetry means that the second stage can begin reading the
              register file at the same time that the hardware determines the
              type of instruction

        - memory operations only appear in lw and sw
            - in x86 you can directly modify and store things in a memory
              location, this means that the instruction needs to be broken down
              into multiple steps

    - Pipeline Hazards
        - there are situations in pipelining when the next instruction cannot
          execute in the next clock cycle

        - Hazards
            - Structural Hazard
                - hardware cannot support the combination of instructions that
                  we want to execute in the same clock cycle

                - there is a resource block of some sort, someone else is using
                  the thing you need

            - Data Hazards
                - occur when the pipeline must be stalled because one step must
                  wait for another to complete

                - these hazards arise from the dependence of a later
                  instruction needing data that was altered by an instruction
                  ahead of it

                    - we don't have to wait for the previous instruction to
                      complete, we just have to wait for it to generate the
                      value we needed through the ALU

                        - this is called "forwarding" or "bypassing"

                        - this doesn't always work though, if for instance we
                          have to wait for the result of a memory read
                            - the stage in which memory is actually read out is
                              two stages ahead of the execute stage of the next
                              instruction

                            - this means that we will have to stall for at
                              least one stage while the output of the load is
                              computed

                            - this is called a "pipeline stall"

            - Control Hazards
                - arises from the need to make a decision based on the results
                  of one instruction, while others are executing

                - one solution is to execute one instruction one by one and
                  based on the output adjust the behavior of the next
                    - this is slow obviously


                - another solution is to predict what the next instruction will
                  be
                    - this does not cause any slowdowns if you are correct
                    - if you are wrong though, you have to go back and redo the
                      things


                - you can predict that all branches will not be taken,
                    - this is a simple schema that will be right 50% of the
                      time

                - a more sophisticated branch prediction has some predicted as
                  taken, and some predicted as untaken

                    - you may always predict that branches that jump to an
                      earlier address will be taken
                        - this would be if they are a loop that loops back to
                          earlier code


                    - there are also dynamic algorithms that adjust the
                      predictions over time


4.6 Pipelined Datapath and Control
    - The datapath is split into 5 pieces
        1. IF: Instruction Fetch
        2. ID: Instruction Decode and register file read
        3. EX: Execution of address calculation
        4. MEM: Data memory access
        5. WB: Write Back


        - the stages are written down from left to right
            - things get more organized as you move to the right
            - nothing ever moves backwards

            - there are two exceptions to data moving left to right though
                - The write back stage, where the result is placed back into
                  the register file in the middle of the datapath
                    - can lead to data hazards

                - the selection of the next value of the PC, choosing between
                  the incremented PC and the branch address from the MEM stage
                    - can lead to control hazards


        - there exist registers between each of the stages to hold intermittent
          values
            - these registers are named for a combination of the two stages
              they are between
                - IF/ID, ID/EX, EX/MEM, MEM/WB

            - the PC can be thought of as one of these registers, one that
              holds the value to be put into the IF stage

        - The lw instruction through the datapath
            - IF
                - the instruction is fetched from memory
                - the instruction is placed in the IF/ID register
                - PC is incremented by 4
                - the incremented PC is saved in the IF/ID register as well in case
                  it is needed by a future instruction

            - ID
                - all of the values are unpacked, the immediate value is sign
                  extended and all of this is stored in to the ID/EX register along
                  with the PC

            - EX
                - the result from the ALU is placed in the EX/MEM pipeline

            - MEM
                - the address is read from the EX/MEM register, and the data at
                  that register is placed in the MEM/WB register

            - WB
                - the data is read from the MEM/WB register and written back to the
                  register file

                - ovbiously we need to know which register to write to, so the
                  register file needs to be forwarded through the entire pipeline




        - any information needed at any point in the pipeline must be passed
          through the entire pipeline!

    - Graphically Representing Pipelines
        - there are two basic stypes of pipeline figures
            - multiple clock cycle pipeline diagrams
                - simpler, but do not contain all of the details

            - single clock cycle pipeline diagrams

    - Pipelined Control
        - we borrow as many of the  control lines from the simple single cycle
          implementation as we can
            - in particular the ALU logic, branch logic, destination register
              numer multiplexor and control lines

        - there is no seperate write control for PC or pipeline registers

        - the control signals are specific to each of the stages of the
          pipeline, so we will have 5 groups of control logic
            1. IF
                - control signals to read instruction memory and to write PS
                  are always asserted
                - nothin special for this stage

            2. ID
                - same as IF
                - nothing special

            3. EX
                - signals set are RegDst, ALUOp, ALUSrc
                - signals select the result register, the ALU operatoin and
                  either read data 2 or sign extended immediate to be used for
                  ALU

            4. MEM
                - signals are branch, MemRead and MemWrite

                - the branch equal, load and store instruction set these signal
                  respectively

            5. WB
                - two control lines:
                    - MemtoReg
                        - decides between sending the ALU result or memory
                          value to register file

                    - RegWrite
                        - writes the chosen value

        - the meaning of all the control lines remains the same
            - this means though that we have to set the 9 control lines for
              each stage for each each instruction
                - the easiest wat to do this is to extend teh pipeline
                  registers to include them

4.7 Data Hazards: Forwarding vs Stalling
    - lets look at a sequence of instructions

        sub $2, $1, $3
        and $12, $2, $5
        or $13, $6, $2
        add $14, $2, $2
        add $15, 100($2)

        - the last 4 instructions are all dependent on the result in register 2
          from the first instruction

        - the value in register 2 won't be updated until cycle 5
            - when we draw the graph, we can show 'dependence lines' for
              instructions that depend on the results from previous instructions

            - if any of these dependence lines go back in time, we have a
              problem!

        - the data in $2 is not needed by the and/or instructions until their
          EX stage, when the  will actually be using it
            - because of this, we can 'forward' the result of $2 from the sub
              command

        - naming notation for pipeline registers
            <name of pipeline register>.<name of the field in that register>

            - examples are

            EX/MEM.RegisterRd

            - with this convention there are two pairs of hazard conditions
                1a. EX/MEM.RegisterRd = ID/EX.RegisterRs
                    - this is the one that we just saw in the above example

                1b. EX/MEM.RegisterRd = ID/EX.RegisterRt
                2a. MEM/WB.RegisterRd = ID/EX.RegisterRs
                2b. MEM/WB.RegisterRd = ID/EX.RegisterRt


        - this policy is inaccurate because not all instructions write
          registers
            - this means that sometimes we would forward when we shouldn't

            - to account for this, we can simply check for the RegWrite signal
              to be active when we see one of the registerpairs above is the
              same


            - there is also the case where the programer writes to $zero
                - for this case we also need to check that MEM/WB.RegisterRd /= 0


        - at this point we can detect Hazards, but we still need a way to
          forward data to avoid them

        - if we have the ability to take the inputs to the ALU from any
          pipeline register, rather than just ID/EX, then we can forward proper
          data
            - we add multiplexors to the inputs of the ALU


            - The forwarding control for this will be found in the EX stage
                - we pass the operand register numbers from the ID stage via
                  the ID/EX pipeline register to determine whether to forwards
                  values


    - Conditions for detecting hazards and control signals
        1. EX hazard
            ```
            if (EX/MEM.RegWrite
                and (EX/MEM.RegisterRd ≠ 0)
                and (EX/MEM.RegisterRd = ID/EX.RegisterRs))
            then
                ForwardA = 10


            if (EX/MEM.RegWrite
                and (EX/MEM.RegisterRd ≠ 0)
                and (EX/MEM.RegisterRd = ID/EX.RegisterRt))
            then
                ForwardB = 10
            ```

        2. Mem Hazard
            ```
            if (MEM/WB.RegWrite
                and (MEM/WB.RegisterRd ≠ 0)
                and (MEM/WB.RegisterRd = ID/EX.RegisterRs))
            then
                ForwardA = 01


            if (MEM/WB.RegWrite
                and (MEM/WB.RegisterRd ≠ 0)
                and (MEM/WB.RegisterRd = ID/EX.RegisterRt))
            then
                ForwardB = 01
            ```

        - Explanation
            - '10' means that ALU input is forwarded from the prior ALU result
            - '01' means that ALU operand is forwarded from data memory
            - '00' means that the operand comes from the register file

    ***************************************************************************
    *   WE ASSUME THAT THE REGISTER FILE SUPPLIES THE CORRECT RESULT IF THE
    *   INSTRUCTION IN THE ID STAGE READS THE SAME REGISTER WRITTEN BY THE
    *   INSTRUCTION IN THE WB STAGE!
    *       - So this means you won't have data hazards between registers in
    *         the WB stage and ID stage, the stages where the register is
    *         updated and the stage where the register is first read
    *       - we write and read on the same clock cycle, we write before we
    *         read though!
    ***************************************************************************


    - there is a compliucation of potential data hazards between the result of
      the instruction in the WB stage, the result of the instruction in the MEM
      stage and the source operand of the instruction in the ALU stage


    - Data Hazards and Stalls
        - one case where forwarding cannot save the day is when an instruction
          tries to read a register following a load instruction that writes the
          same register
            - the data is still being read from memory in clock cycle 4 while
              the ALU is performing the operation for the following instruction

        - in addition to the forwarding unit, we need a hazard detection unit
            ```
            if (ID/EX.MemRead and
                ((ID/EX.RegisterRt = IF/ID.RegisterRs) or
                 (ID/EX.RegisterRt = IF/ID.RegisterRt)))
            then
                stall the pipeline
            ```

            - the only instruction that reads data memory is a load
                ID/EX.MemRead
            - then we check to see if the destination register of the
              load in the EX stage matches either srouce in the ID stage

            - if both of these are true, we stall for 1 clock cycle, then we
              can use forwarding

                - we must stall both the ID and the IF stages, since we don't
                  want the IF to go and overwrite all of out info in the ID


                - to achieve the stall those stages just perform NOPS
                    - deassert all of the control lines in the EX, MEM and WB
                      stages to 'do nothing'


4.8 Control Hazards
    - Control Hazard: Delay in determining the proper instruction fetch

    - simpler than data hazards and occur much less frequently
        - nothing as effective as forwarding for avoiding control hazards

    - There are two different simple schemes

    - Assume Branch not Taken
        - we can predict that the branch will not be taken at all times
        - if the branch is taken then we have to discard all of the
          instructions we predicted

        - to discard instructions we simply change the control values to 0s
            - we have to be able to flush instructions in the IF, ID and EX
              stages though

    - Reducing the Delay of Branches
        - we can improve branch performance by reducing the cost of the taken
          branch

        - we can move the determination of the need for branching earlier than
          the MEM stage

            - we have to move the address computation earlier
                - this is easy to change, we just move the branch adder from
                  the EX stage to the ID stage


            - the harder part is the branch decision
                - we can check equality by xoring both of the inputs and then
                  or'ing the resulting bits together
                    - we have to use forwarding for this though, because what
                      if our thing we are comparing is yet to be updated by a
                      previous isntruction

                    - there are two complicating factors
                        1. During ID we ahve to decide whether a bypass to the
                           equality unit is needed
                            - the bypased source operands of a branch can come
                              either from ALU/MEM or MEM/WB

                        2. it is possible that a data hazard can occur and a
                           stall is needed

            - implementing this will reduce the stall to one cycle
                - we add a IF.Flush control line to flush out the IF/ID
                  pipeline register if there is a need


    - Dynamic Branch Prediction
        - with deeper pipelines the performance impact from missed branches is
          worse

        - with dynamic branch prediction, we look at if the branch was taken
          last time

        - branch prediction buffer, or branch history table
            - implementation of dynamic branch prediction

            - there is small memory indexed by the lower portion of the address
              of the branch instruction
                - the memory contains a bit that says wether or not it was
                  taken last time

            - we then fetch based on this prediction

            - often a 2 bit scheme is used, the prediction must be wrong twice
              before the table is updated
                - it is represented as a DFA with 4 states


4.9 Exceptions
    - One of the hardest parts of implementing the control is exceptions and
      intrerrrups
        - they can change the normal flow of instruction execution


    - many texts do not distinguish the difference between interrupts and
      exceptions, but this text uses the MIPS approach

        - exceptions
            - any unexpected change in control flow
                - no distringuish between if its cause was internal or external

        - interrupt
            - the event was externally caused

    - How Exceptions are handled in the MIPS archiecture

        - there are two exceptions that can be generated in our current implementation
            - execution of an undefined instruction
            - arithmetic overflow


        - what does the processor do when the exception occurs?
            - save the address of the offending instruction in the exception
              program counter

            - transfer control to the operating systemm at some specified
              address

            - the OS then takes the correct action

            - the OS must know the reason for the excecption, as well as the
              instruction that caused it
                - two main methods used to communiocate this

                1. status register
                    - this holds the fields that indicates the reason for the
                      exception

                    - this is what MIPS does

                2. vectored intrerrups
                    - the address to which control is transferred is determined
                      by the cause of the exception

                - with status register you only need a single entry point for
                  interrupts / exceptions

                - for this though, two more registers need to be added
                    - EPC
                        - 32 bit register used to hold the address of the
                          affected instruction

                        - this is needed even with vectored intrerrupts

                    - Cause
                        - a register used to record the cause of the exception

                        - this one is only needed for the 'status register'
                          implementation


    - Exceptions in a Pipelined Implementation
        - Exceptions are treated as another form of control hazard

        - have to flush out all of the existing data in the pipeline
