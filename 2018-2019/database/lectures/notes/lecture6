going to be looking at sql

we've looked at 
    what: ERD

    how: Relational model

and today is the actual implementation

SQL - structured query language

it won't be difficult to transcribe from the how to SQL


history:
    invented by IBM in the 70s

relational database definitions:
    relations are made up of 2 parts:
        schema:
            name of relation

        instance:
            a table, with rows and columns

Commands:
    Students(sid:string, name:string, login:string, age:integer, gpa:real)
        this is out schema

    CREATE TABLE Students(sid CHAR(20) PRIMARY KEY,
                          name CHAR(20,
                          login CHAR(10),
                          age INTEGER,
                          gpa REAL);

        this is our instance

    to see description or what it is we could run 
        DESCRIBE Students

    to insert into the table:
        INSERT INTO Students VALUES('53666', 'Jones', 'jones@cs', 18, 3.4)

    delete tuples from a table
        DELETE FROM Students S WHERE S.name = 'Smith';

    update values in a table
        UPDATE Students S SET S.gpa = S.gpa - 0.1 WHERE S.gpa >= 3.3;


    querying table for particular tuples:
        to find all students that are 18 years old

               | This means select all atrributes for each matching tuple
               v 
        SELECT * FROM Students S WHERE S.age = 18;

        if we just wanted the name and login
        
        SELECT S.name, S.login FROM Students S WHERE S.age = 18;


    to delete this table
        Drop TABLE Students CASCADE CONSTRAINTS

Creating Tables:
    domain constraint is enforced by dbms, type saftey

Querying Multiple tables:
    SELECT S.name, E.cid FROM Students S, Enrolled E, 
    WHERE S.sid = E.sid AND E.grade = 'A';

Altering Tables:
    ALTER TABLE Students ADD firstYear integer;

    this would add a column to the tuple / table

Refferential Integrity:
    2 relations that are connected through a foreign key

    the dbms inforces this, ensures that the thing you're adding has the proper
    foreign keys to be added.  If what you are trying to insert a tupple
    without one of the required foreign keys it will be rejected

    can be specified for deletes and updates

    CREATE TABLE Enrolled(
        ...
        ...
        FOREIGN KEY (sid) REFERENCES Students(sid)
            ON DELETE CASCADE
            ON UPDATE SET DEFAULT)

    ON:
        Cascade:
            if we delete the parent, the cihldren will automatically be deleted
        NO ACTION (default), delete / update is rejected

        SET NULL/ SET DEFAULT:
            sets foreign value of referencing tuple
        
    What if we have full participation, must have:
        represented as a thicker arrow

        we add NOT NULL

    
        CREATE TABLE Enrolled(
            ...
            ssn CHAR(20) NOT NULL,
            FOREIGN KEY (sid) REFERENCES Students(sid)
                ON DELETE CASCADE
                ON UPDATE SET DEFAULT)

Weak Entity:
    can be identified uniquely only by considering the primary key of another
    (owner) entity.
        owner entity set must participate in a one-to-many relationship set

        weak entity must be involved with total participation

    CREATE TABLE Dep_Policy(
        pname CHAR(20),
        age INTEGER,
        ssn CHAR(11) NOT NULL,
        cost REAL,
        PRIMARY KEY (ssn, pname),
        FOREIGN KEY (ssn) REFERENCES Employees,
        ON DELETE CASCADE);

    multiple dep policies can have the same pname, but only one can have a
    given pname for a given ssn

ISA Hierarchies:
    Triangle connects the parent and the children

Views in SQL:
    can be dropped using the DROP VIEW command

    can pick things from particular tables

    CREATE VIEW YoungActiveStudents(name, grade)
        AS SELECT S.name, E.grade
        FROM Students S, Enrolled E
        WHERE S.sid = E.sid and S.age < 21;

Keywords:
    Relation list:
        A list of Relation names

    target list:
        list of attribute of relations in relation list

    qualification:
        comparisons

    DISTINCT:
        removes duplicates

Doing joins first makes things very inefficient

Implicit Regex:
    SELECT S.age,age1=S.age-5, 2*S.age AS age2
    FROM Sailors S
    WHERE S.sname LIKE'B_%B';

    the B_%B literally means B[\w\W]*B

  
Additional Operators:
    Union, intersect, except:

    Set Operators:
        IN, op ANY, op ALL, EXISTS

        both IN and EXISTS can be prefixed with NOT

        IN:
            SELECT S.name
            FROM Sailors S
            WHERE S.sid IN (SELECT R.sid
                            FROM Reserves R
                            WHERE R.bid=103)
        EXISTS:
            SELECT S.name
            FROM Sailors S
            WHERE EXISTS (SELECT *
                          FROM Reserves R
                          WHERE R.bid=103 AND S.sid=R.sid)

        >, <, =:
            select sailors whos ratings are greater than that of some sailor
            called lubber
                SELECT *
                FROM Sailors S
                WHERE S.rating > ANY (SELECT S2.rating
                                      FROM Sailors S2
                                      WHERE S2.sname='lubber')
                                  
            

